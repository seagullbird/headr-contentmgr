// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/seagullbird/headr-contentmgr/service (interfaces: Service)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	db "github.com/seagullbird/headr-contentmgr/db"
	reflect "reflect"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// DeletePost mocks base method
func (m *MockService) DeletePost(arg0 context.Context, arg1 uint) error {
	ret := m.ctrl.Call(m, "DeletePost", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePost indicates an expected call of DeletePost
func (mr *MockServiceMockRecorder) DeletePost(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockService)(nil).DeletePost), arg0, arg1)
}

// GetAllPosts mocks base method
func (m *MockService) GetAllPosts(arg0 context.Context) ([]uint, error) {
	ret := m.ctrl.Call(m, "GetAllPosts", arg0)
	ret0, _ := ret[0].([]uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPosts indicates an expected call of GetAllPosts
func (mr *MockServiceMockRecorder) GetAllPosts(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPosts", reflect.TypeOf((*MockService)(nil).GetAllPosts), arg0)
}

// GetPost mocks base method
func (m *MockService) GetPost(arg0 context.Context, arg1 uint) (db.Post, error) {
	ret := m.ctrl.Call(m, "GetPost", arg0, arg1)
	ret0, _ := ret[0].(db.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPost indicates an expected call of GetPost
func (mr *MockServiceMockRecorder) GetPost(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPost", reflect.TypeOf((*MockService)(nil).GetPost), arg0, arg1)
}

// NewPost mocks base method
func (m *MockService) NewPost(arg0 context.Context, arg1 db.Post) (uint, error) {
	ret := m.ctrl.Call(m, "NewPost", arg0, arg1)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewPost indicates an expected call of NewPost
func (mr *MockServiceMockRecorder) NewPost(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewPost", reflect.TypeOf((*MockService)(nil).NewPost), arg0, arg1)
}

// PatchPost mocks base method
func (m *MockService) PatchPost(arg0 context.Context, arg1 db.Post) error {
	ret := m.ctrl.Call(m, "PatchPost", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchPost indicates an expected call of PatchPost
func (mr *MockServiceMockRecorder) PatchPost(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchPost", reflect.TypeOf((*MockService)(nil).PatchPost), arg0, arg1)
}
